html,
body {
  padding: 0;
  margin: 0;
}

input {
  font-size: 14px;
  font-family: Helvetica, sans-serif;
}

body {
  background-color: #bbb;
  font-family: Helvetica, sans-serif;
  padding-bottom: 100px;
}

h2,
h3 {
  margin: 0 0 0.75em 0;
}

/* first example */
.container {
  max-width: 750px;
  margin: 20px auto 0 auto;
  padding: 30px;
  background-color: #fff;
}

.container {
}
.form-row {
  padding: 10px 0;
  display: flex;
}
.form-row label {
  /* flex: 1; */
}
.form-row input {
  flex: 1;
}

/* 2nd example */
.column-layout {
  max-width: 1300px;
  background-color: #fff;
  margin: 40px auto 0 auto;
  line-height: 1.65;
  padding: 20px 50px;
  display: flex;
}

.main-column {
  flex: 3;
  order: 2;
}
.sidebar-one {
  flex: 1;
  order: 1;
}
.sidebar-two {
  flex: 1;
  order: 3;
}
/* third example */
.call-outs-container {
  max-width: 1400px;
  margin: 40px auto 0 auto;
}

/* lets create mobile responsive layout via media quary */
/* @media (max-width: 768px) {
  .call-outs-container {
    flex-direction: column;
  }
  .call-out {
    flex-basis: 100%;
    margin-bottom: 20px;
  }
} */
/* // here we reboke the display and justify-content property below 900px it will not applied */
@media (min-width: 900px) {
  .call-outs-container {
    display: flex;
    /* to change the evenly column size we use align-item */
    /* align-items: stretch; it's a defult value which give us evenly size columns */
    /* align-items: center; */
    /* how we create gap between those column? */
    justify-content: space-between; /* to create gup we need some free space which is not abalable here. To create free space we need to reduce the size of those colum by defining width or (flex-box es width which is flex-basics)*/
  }
}
.call-out {
  padding: 20px;
  /* if we have padding and margin also width then we need to specifi the box-sizing:border-box so that it fit it's original size */
  box-sizing: border-box;
  /* flex: 1;
  it's create evely size column so if it excit 3 column then it will create 3 column of equal size. To create uneven size column we need to remove flex:1 and use flex-basis: 30%;
  */
  /* width: 30%; 
  width === flex-basis 
  */
  flex-basis: 30%;
}

.call-out:nth-child(1) {
  background-color: #c0dbe2;
}
.call-out:nth-child(2) {
  background-color: #cdf1c3;
}
.call-out:nth-child(3) {
  background-color: #ccb9da;
}

.fixed-size-container {
  max-width: 1400px;
  margin: 40px auto 0 auto;
  background-color: #fff;
  padding: 30px 0;
  display: flex;
  /* describe flex-wrap:wrap
   it's help the element to wrap to the next line if it's not fit in the container. It's also help to mantain the original size of the element.
  */
  /* justify-content: space-around;
  justify-content: space-between;
  different between space-around and space-between is space-around will create gap between the first and last element and space-between will not create gap between the first and last element. Space-between create gap between the element and space-around create gap between the element and the edge of the container.

  space-around === space-between + space-around 
  */
  justify-content: space-around;
  flex-wrap: wrap;
}
.fixed-size {
  width: 150px;
  height: 100px;
  background-color: #990b47;
  color: #fff;
  line-height: 100px;
  text-align: center;
  font-weight: bold;
  font-size: 60px;
  margin-bottom: 20px;
}

.banner {
  height: 400px;
  max-width: 700px;
  margin: 40px auto 40px auto;
  background-color: #2a2a2a;
  display: flex;
  /* centering via container property 
 
  justify-content: center;
  align-items: center;
 */
}
.center-me {
  color: #fff;
  font-size: 50px;
  /* just a flex item property margin:auto */
  margin: auto;
}
/* sixth example */
.equal-height-container {
  max-width: 900px;
  margin: 0 auto;
  display: flex;
}

.first {
  background-color: #fff;
  padding: 20px;
  flex: 1;
  /* flex:1 is equally distribute all avlable space in between flex container flex item 
  here first and second is the 2 item of the equal-height flex container.
  */
}

.second {
  background-color: yellow;
  flex: 1;
  /* the second item also has 2 child item which need to fit vartically the inter second container what can we do? 
  also we need to make the second item flex container and make the child item flex item. 
  we need to use flex-direction: column; 
  */
  display: flex;
  flex-direction: column;
}

.second-a {
  background-color: #c0dbe2;
  flex: 1;
}

.second-b {
  background-color: #cdf1c3;
  flex: 1;
}
